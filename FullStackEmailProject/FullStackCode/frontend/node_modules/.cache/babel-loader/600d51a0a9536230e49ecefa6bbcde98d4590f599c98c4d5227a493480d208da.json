{"ast":null,"code":"var _jsxFileName = \"/Users/armanjordan/Desktop/FullStack/Assignment8/Assignment8/frontend/src/components/Window.jsx\",\n  _s = $RefreshSig$();\n/*\n * Copyright (C) 2018-2022 David C. Harrison. All right reserved.\n *\n * You may not use, distribute, publish, or modify this code without\n * the express written permission of the copyright holder.\n */\n\nimport React from 'react';\nimport Avatar from '@mui/material/Avatar';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport StarBorderIcon from '@mui/icons-material/StarBorder';\nimport IconButton from '@mui/material/IconButton';\nimport StarIcon from '@mui/icons-material/Star';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport './Window.css';\nimport WindowContext from './WindowContext.jsx';\n\n// Grab all of the emails from the queried mailbox\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchEmails = (setPrintedEmails, setError) => {\n  console.log('Is fetch user even being called?');\n  const item = localStorage.getItem('user');\n  console.log('user: ' + item);\n  if (!item) {\n    return;\n  }\n  const user = JSON.parse(item);\n  const bearerToken = user ? user.accessToken : '';\n  fetch('http://localhost:3010/v0/mail?mailbox=Inbox', {\n    method: 'get',\n    headers: new Headers({\n      'Authorization': `Bearer ${bearerToken}`,\n      'Content-Type': 'application/x-www-form-urlencoded'\n    })\n  }).then(response => {\n    if (!response.ok) {\n      throw response;\n    }\n    return response.json();\n  }).then(json => {\n    setError('');\n    setPrintedEmails(json);\n  }).catch(error => {\n    console.log(error);\n    setPrintedEmails([]);\n    setError(`${error.status} - ${error.statusText}`);\n  });\n};\n\n/*\n// function to sort all of the emails by date ----------------------------------\nconst sortEmails = (printedEmails, setPrintedEmails) => {\n  const sortedEmails = printedEmails.sort((a, b) => {\n    return new Date(a.received).getTime() -\n        new Date(b.received).getTime();\n  }).reverse();\n\n  // Create a variable to store todays date for comparing\n  const today = new Date();\n\n  // Create a variable to store month strings, and month values\n  const monthString = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  const monthLength = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n  // SUBSTRING GUIDE:\n  // substring\n  // For each email\n  // substring(0, 4) is year ex: 2022\n  // substring(5, 7) is month ex: 01\n  // substring(8, 10) is day ex: 09\n  // substring(11, 16) is time ex: 07:06:00 (do 16 instead of 19 no secs)\n  // Sort through and prep each received for printing\n  sortedEmails.forEach((prop) => {\n    // first, check if the day is the same\n    if ( parseInt(prop.received.substring(8, 10)) === today.getDate() &&\n    parseInt(prop.received.substring(5, 7)) === (today.getMonth() + 1) &&\n    parseInt(prop.received.substring(0, 4)) === today.getFullYear()) {\n      // If it is, print time\n\n      // if (parseInt(prop.received.substring(11, 13)) > 12) {\n      prop.received = '0' +\n        (parseInt(prop.received.substring(11, 13)) - 7).toString() +\n        prop.received.substring(13, 16);\n      // }\n    } else {\n      // HOLE: fails if date 'yesterday' is from jan1 to dec31\n      // if it was yesterday, print yesterday\n\n      // checks if inputted day is today - 1, then if same month and year\n      // or if inputted day is 1, then if end of prev month and same year\n      if ((today.getDate() - 1 === prop.received.substring(8, 10) &&\n      today.getMonth() === prop.received.substring(5, 7) &&\n      today.getFullYear() === prop.received.substring(0, 4)) ||\n      (today.getDate() === 1 && prop.received.substring(8, 10) ===\n      monthLength[prop.received.substring(5, 7) - 2] &&\n      today.getFullYear() === prop.received.substring(0, 4))) {\n        prop.received = 'yesterday';\n      } else {\n        // leap year yesterday\n        // if today is the 1st, and today month is march, and its leap year\n        // and prop month is 2, and its a leap year, and its 29th\n        if (today.getDate() === 1 &&\n        today.getMonth() === 3 &&\n        today.getFullYear() === prop.received.substring(0, 4) &&\n        prop.received.substring(5, 7) === 2 &&\n        prop.received.substring(0, 4) % 4 === 0 &&\n        prop.received.substring(8, 10) === 29) {\n          prop.received = 'yesterday';\n        } else {\n          // then, check if the year is the same\n          if ( parseInt(prop.received.substring(0, 4)) ===\n            today.getFullYear() ) {\n            // If it is, print month and year\n            prop.received = monthString[parseInt(\n              prop.received.substring(5, 7)) - 1] +\n              ' ' + prop.received.substring(8, 10);\n          } else {\n            // If the year is not the same, print year\n            prop.received = prop.received.substring(0, 4);\n          }\n        }\n      }\n    }\n  });\n  setPrintedEmails(sortedEmails);\n  return;\n};\n*/\n// -----------------------------------------------------------------------------\n\n/**\n  * Function to generate email html\n  *\n  *  @param {array} printedEmails An array of sorted formatted emails\n  *  @return {object} All of the email html\n  */\nfunction writeEmails(printedEmails) {\n  return (\n    // if email.avatarDisplay == true, display, otherwise substring(0, 1)\n    printedEmails.map(email => /*#__PURE__*/_jsxDEV(Box, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          borderTop: 1,\n          borderBottom: 1\n        },\n        width: \"610px\",\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'flex-start',\n            padding: 1\n          },\n          children: [email.avatarDisplay === true ? /*#__PURE__*/_jsxDEV(Avatar, {\n            sx: {\n              padding: 2,\n              marginRight: 3,\n              marginTop: 1\n            },\n            children: email.avatar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Avatar, {\n            sx: {\n              padding: 2,\n              marginRight: 3,\n              marginTop: 1\n            },\n            children: email.fromName.substring(0, 1).toUpperCase()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              width: \"500px\",\n              sx: {\n                display: 'flex',\n                justifyContent: 'space-between'\n              },\n              children: [email.opened === 'false' ? /*#__PURE__*/_jsxDEV(Typography, {\n                align: \"left\",\n                sx: {\n                  fontWeight: 'bold'\n                },\n                children: email.fromName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n                align: \"left\",\n                children: email.fromName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                align: \"right\",\n                sx: {\n                  marginRight: 2\n                },\n                children: email.received\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 15\n            }, this), email.opened === 'false' ? /*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                marginTop: 1.2,\n                fontWeight: 'bold'\n              },\n              children: email.subject\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                marginTop: 1.2\n              },\n              children: email.subject\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              width: \"500px\",\n              sx: {\n                display: 'flex',\n                justifyContent: 'space-between'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                sx: {\n                  textOverflow: 'ellipsis',\n                  overflow: 'hidden',\n                  whiteSpace: 'nowrap',\n                  marginTop: 1.2\n                },\n                align: \"left\",\n                children: email.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 17\n              }, this), email.starred === true ? /*#__PURE__*/_jsxDEV(IconButton, {\n                children: [\" \", /*#__PURE__*/_jsxDEV(StarBorderIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 32\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(IconButton, {\n                children: [\" \", /*#__PURE__*/_jsxDEV(StarIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 212,\n                  columnNumber: 32\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this))\n  );\n}\n\n/**\n * Simple component with no state.\n *\n * See the basic-react example for an example of adding and reacting to\n * changes in state and lecture 10 for details on Material-UI\n *\n * @return {object} JSX\n */\nfunction Window() {\n  _s();\n  // State variables\n  // A state to store which mailbox to print\n  const [printedEmails, setPrintedEmails] = React.useState([]);\n  const [error, setError] = React.useState('Logged Out');\n  const globalVars = {\n    printedEmails: printedEmails,\n    setPrintedEmails,\n    error: error,\n    setError\n  };\n  const logout = () => {\n    localStorage.removeItem('user');\n    setPrintedEmails([]);\n    setError('Logged Out');\n  };\n  React.useEffect(() => {\n    fetchEmails(setPrintedEmails, setError);\n  }, []);\n  // after this effect, printedEmails should be populated with sorted\n  // and formatted dates, time to print!\n  console.log(printedEmails);\n  return /*#__PURE__*/_jsxDEV(WindowContext.Provider, {\n    value: globalVars,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      tabIndex: 0,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Div\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            flexGrow: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(AppBar, {\n            position: \"fixed\",\n            sx: {\n              zIndex: theme => theme.zIndex.drawer + 1\n            },\n            children: /*#__PURE__*/_jsxDEV(Toolbar, {\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                width: \"500px\",\n                sx: {\n                  display: 'flex',\n                  justifyContent: 'space-between'\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h6\",\n                  noWrap: true,\n                  component: \"div\",\n                  align: \"left\",\n                  sx: {\n                    margin: 1\n                  },\n                  children: \"Inbox\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 271,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                  size: \"large\",\n                  edge: \"start\",\n                  color: \"inherit\",\n                  align: \"right\",\n                  sx: {\n                    mr: 2\n                  },\n                  onClick: logout,\n                  children: /*#__PURE__*/_jsxDEV(SettingsIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 284,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 277,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"tableDiv\",\n        children: writeEmails()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 5\n  }, this);\n}\n_s(Window, \"nxRgSZ+nyUOOlOGh/DBGz2FfKw4=\");\n_c = Window;\nexport default Window;\nvar _c;\n$RefreshReg$(_c, \"Window\");","map":{"version":3,"names":["React","Avatar","Box","Grid","Typography","StarBorderIcon","IconButton","StarIcon","SettingsIcon","AppBar","Toolbar","WindowContext","fetchEmails","setPrintedEmails","setError","console","log","item","localStorage","getItem","user","JSON","parse","bearerToken","accessToken","fetch","method","headers","Headers","then","response","ok","json","catch","error","status","statusText","writeEmails","printedEmails","map","email","display","borderTop","borderBottom","justifyContent","padding","avatarDisplay","marginRight","marginTop","avatar","fromName","substring","toUpperCase","opened","fontWeight","received","subject","textOverflow","overflow","whiteSpace","content","starred","Window","useState","globalVars","logout","removeItem","useEffect","flexGrow","zIndex","theme","drawer","margin","mr"],"sources":["/Users/armanjordan/Desktop/FullStack/Assignment8/Assignment8/frontend/src/components/Window.jsx"],"sourcesContent":["/*\n * Copyright (C) 2018-2022 David C. Harrison. All right reserved.\n *\n * You may not use, distribute, publish, or modify this code without\n * the express written permission of the copyright holder.\n */\n\nimport React from 'react';\n\nimport Avatar from '@mui/material/Avatar';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport StarBorderIcon from '@mui/icons-material/StarBorder';\nimport IconButton from '@mui/material/IconButton';\nimport StarIcon from '@mui/icons-material/Star';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\n\nimport './Window.css';\n\nimport WindowContext from './WindowContext.jsx';\n\n// Grab all of the emails from the queried mailbox\nconst fetchEmails = (setPrintedEmails, setError) => {\n  console.log('Is fetch user even being called?');\n  const item = localStorage.getItem('user');\n  console.log('user: ' + item);\n  if (!item) {\n    return;\n  }\n  const user = JSON.parse(item);\n  const bearerToken = user ? user.accessToken : '';\n  fetch('http://localhost:3010/v0/mail?mailbox=Inbox', {\n    method: 'get',\n    headers: new Headers({\n      'Authorization': `Bearer ${bearerToken}`,\n      'Content-Type': 'application/x-www-form-urlencoded',\n    }),\n  })\n    .then((response) => {\n      if (!response.ok) {\n        throw response;\n      }\n      return response.json();\n    })\n    .then((json) => {\n      setError('');\n      setPrintedEmails(json);\n    })\n    .catch((error) => {\n      console.log(error);\n      setPrintedEmails([]);\n      setError(`${error.status} - ${error.statusText}`);\n    });\n};\n\n/*\n// function to sort all of the emails by date ----------------------------------\nconst sortEmails = (printedEmails, setPrintedEmails) => {\n  const sortedEmails = printedEmails.sort((a, b) => {\n    return new Date(a.received).getTime() -\n        new Date(b.received).getTime();\n  }).reverse();\n\n  // Create a variable to store todays date for comparing\n  const today = new Date();\n\n  // Create a variable to store month strings, and month values\n  const monthString = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  const monthLength = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n  // SUBSTRING GUIDE:\n  // substring\n  // For each email\n  // substring(0, 4) is year ex: 2022\n  // substring(5, 7) is month ex: 01\n  // substring(8, 10) is day ex: 09\n  // substring(11, 16) is time ex: 07:06:00 (do 16 instead of 19 no secs)\n  // Sort through and prep each received for printing\n  sortedEmails.forEach((prop) => {\n    // first, check if the day is the same\n    if ( parseInt(prop.received.substring(8, 10)) === today.getDate() &&\n    parseInt(prop.received.substring(5, 7)) === (today.getMonth() + 1) &&\n    parseInt(prop.received.substring(0, 4)) === today.getFullYear()) {\n      // If it is, print time\n\n      // if (parseInt(prop.received.substring(11, 13)) > 12) {\n      prop.received = '0' +\n        (parseInt(prop.received.substring(11, 13)) - 7).toString() +\n        prop.received.substring(13, 16);\n      // }\n    } else {\n      // HOLE: fails if date 'yesterday' is from jan1 to dec31\n      // if it was yesterday, print yesterday\n\n      // checks if inputted day is today - 1, then if same month and year\n      // or if inputted day is 1, then if end of prev month and same year\n      if ((today.getDate() - 1 === prop.received.substring(8, 10) &&\n      today.getMonth() === prop.received.substring(5, 7) &&\n      today.getFullYear() === prop.received.substring(0, 4)) ||\n      (today.getDate() === 1 && prop.received.substring(8, 10) ===\n      monthLength[prop.received.substring(5, 7) - 2] &&\n      today.getFullYear() === prop.received.substring(0, 4))) {\n        prop.received = 'yesterday';\n      } else {\n        // leap year yesterday\n        // if today is the 1st, and today month is march, and its leap year\n        // and prop month is 2, and its a leap year, and its 29th\n        if (today.getDate() === 1 &&\n        today.getMonth() === 3 &&\n        today.getFullYear() === prop.received.substring(0, 4) &&\n        prop.received.substring(5, 7) === 2 &&\n        prop.received.substring(0, 4) % 4 === 0 &&\n        prop.received.substring(8, 10) === 29) {\n          prop.received = 'yesterday';\n        } else {\n          // then, check if the year is the same\n          if ( parseInt(prop.received.substring(0, 4)) ===\n            today.getFullYear() ) {\n            // If it is, print month and year\n            prop.received = monthString[parseInt(\n              prop.received.substring(5, 7)) - 1] +\n              ' ' + prop.received.substring(8, 10);\n          } else {\n            // If the year is not the same, print year\n            prop.received = prop.received.substring(0, 4);\n          }\n        }\n      }\n    }\n  });\n  setPrintedEmails(sortedEmails);\n  return;\n};\n*/\n// -----------------------------------------------------------------------------\n\n\n/**\n  * Function to generate email html\n  *\n  *  @param {array} printedEmails An array of sorted formatted emails\n  *  @return {object} All of the email html\n  */\nfunction writeEmails(printedEmails) {\n  return (\n    // if email.avatarDisplay == true, display, otherwise substring(0, 1)\n    printedEmails.map((email) => (\n        <Box>\n          <Box\n            sx={{display: 'flex', borderTop: 1, borderBottom: 1}} width='610px'\n            >\n            <Grid sx={{\n              display: 'flex',\n              justifyContent: 'flex-start',\n              padding: 1,\n            }}>\n            {email.avatarDisplay === true ?\n              <Avatar sx={{padding: 2, marginRight: 3, marginTop: 1}}>\n                  {email.avatar}\n              </Avatar> :\n              <Avatar sx={{padding: 2, marginRight: 3, marginTop: 1}}>\n                {(email.fromName).substring(0, 1).toUpperCase()}\n              </Avatar>\n            }\n            <Box>\n              <Grid width='500px' sx={{\n                display: 'flex',\n                justifyContent: 'space-between',\n              }}>\n                {email.opened === 'false' ?\n                  <Typography align='left' sx={{fontWeight: 'bold'}}>\n                    {email.fromName}\n                  </Typography> :\n                  <Typography align='left'>\n                    {email.fromName}\n                  </Typography>\n                }\n\n                <Typography align='right' sx={{marginRight: 2}}>\n                  {email.received}\n                </Typography>\n              </Grid>\n              {email.opened === 'false' ?\n                <Typography sx={{marginTop: 1.2, fontWeight: 'bold'}}>\n                  {email.subject}\n                </Typography> :\n                <Typography sx={{marginTop: 1.2}}>\n                  {email.subject}\n                </Typography>\n              }\n\n              <Grid width='500px' sx={{\n                display: 'flex',\n                justifyContent: 'space-between',\n              }}>\n                <Typography\n                  sx={{\n                    textOverflow: 'ellipsis',\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap',\n                    marginTop: 1.2,\n                  }}\n                align='left'>\n                  {email.content}\n                </Typography>\n                {email.starred === true ?\n                  <IconButton> <StarBorderIcon /> </IconButton> :\n                  <IconButton> <StarIcon /> </IconButton>\n                }\n              </Grid>\n            </Box>\n          </Grid>\n        </Box>\n      </Box>\n    ))\n  );\n}\n\n/**\n * Simple component with no state.\n *\n * See the basic-react example for an example of adding and reacting to\n * changes in state and lecture 10 for details on Material-UI\n *\n * @return {object} JSX\n */\nfunction Window() {\n  // State variables\n  // A state to store which mailbox to print\n  const [printedEmails, setPrintedEmails] = React.useState([]);\n  const [error, setError] = React.useState('Logged Out');\n\n  const globalVars = {\n    printedEmails: printedEmails,\n    setPrintedEmails,\n    error: error,\n    setError,\n  };\n\n  const logout = () => {\n    localStorage.removeItem('user');\n    setPrintedEmails([]);\n    setError('Logged Out');\n  };\n\n  React.useEffect(() => {\n    fetchEmails(setPrintedEmails, setError);\n  }, []);\n  // after this effect, printedEmails should be populated with sorted\n  // and formatted dates, time to print!\n  console.log(printedEmails);\n\n  return (\n    <WindowContext.Provider value={globalVars}>\n      <div tabIndex={0}>\n        <h2>Div</h2>\n\n        <div>\n          <Box sx={{flexGrow: 1}}>\n            <AppBar position=\"fixed\" sx={{zIndex: (theme) =>\n              theme.zIndex.drawer + 1}}>\n              <Toolbar>\n                <Grid width='500px' sx={{\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                  }}>\n                  <Typography\n                    variant=\"h6\" noWrap component=\"div\"\n                    align=\"left\" sx={{margin: 1}}\n                    >\n                    Inbox\n                  </Typography>\n                  <IconButton\n                    size=\"large\"\n                    edge=\"start\"\n                    color=\"inherit\"\n                    align=\"right\"\n                    sx={{mr: 2}}\n                    onClick={logout}>\n                    <SettingsIcon />\n                  </IconButton>\n                </Grid>\n              </Toolbar>\n            </AppBar>\n          </Box>\n        </div>\n\n        <div id=\"tableDiv\">\n          {writeEmails()}\n        </div>\n    </div>\n    </WindowContext.Provider>\n  );\n}\n\nexport default Window;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,GAAG,MAAM,mBAAmB;AACnC,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,cAAc,MAAM,gCAAgC;AAC3D,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAOC,YAAY,MAAM,8BAA8B;AACvD,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,OAAO,MAAM,uBAAuB;AAE3C,OAAO,cAAc;AAErB,OAAOC,aAAa,MAAM,qBAAqB;;AAE/C;AAAA;AACA,MAAMC,WAAW,GAAG,CAACC,gBAAgB,EAAEC,QAAQ,KAAK;EAClDC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;EAC/C,MAAMC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EACzCJ,OAAO,CAACC,GAAG,CAAC,QAAQ,GAAGC,IAAI,CAAC;EAC5B,IAAI,CAACA,IAAI,EAAE;IACT;EACF;EACA,MAAMG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC;EAC7B,MAAMM,WAAW,GAAGH,IAAI,GAAGA,IAAI,CAACI,WAAW,GAAG,EAAE;EAChDC,KAAK,CAAC,6CAA6C,EAAE;IACnDC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE,IAAIC,OAAO,CAAC;MACnB,eAAe,EAAG,UAASL,WAAY,EAAC;MACxC,cAAc,EAAE;IAClB,CAAC;EACH,CAAC,CAAC,CACCM,IAAI,CAAEC,QAAQ,IAAK;IAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;MAChB,MAAMD,QAAQ;IAChB;IACA,OAAOA,QAAQ,CAACE,IAAI,EAAE;EACxB,CAAC,CAAC,CACDH,IAAI,CAAEG,IAAI,IAAK;IACdlB,QAAQ,CAAC,EAAE,CAAC;IACZD,gBAAgB,CAACmB,IAAI,CAAC;EACxB,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;IAChBnB,OAAO,CAACC,GAAG,CAACkB,KAAK,CAAC;IAClBrB,gBAAgB,CAAC,EAAE,CAAC;IACpBC,QAAQ,CAAE,GAAEoB,KAAK,CAACC,MAAO,MAAKD,KAAK,CAACE,UAAW,EAAC,CAAC;EACnD,CAAC,CAAC;AACN,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,WAAW,CAACC,aAAa,EAAE;EAClC;IACE;IACAA,aAAa,CAACC,GAAG,CAAEC,KAAK,iBACpB,QAAC,GAAG;MAAA,uBACF,QAAC,GAAG;QACF,EAAE,EAAE;UAACC,OAAO,EAAE,MAAM;UAAEC,SAAS,EAAE,CAAC;UAAEC,YAAY,EAAE;QAAC,CAAE;QAAC,KAAK,EAAC,OAAO;QAAA,uBAEnE,QAAC,IAAI;UAAC,EAAE,EAAE;YACRF,OAAO,EAAE,MAAM;YACfG,cAAc,EAAE,YAAY;YAC5BC,OAAO,EAAE;UACX,CAAE;UAAA,WACDL,KAAK,CAACM,aAAa,KAAK,IAAI,gBAC3B,QAAC,MAAM;YAAC,EAAE,EAAE;cAACD,OAAO,EAAE,CAAC;cAAEE,WAAW,EAAE,CAAC;cAAEC,SAAS,EAAE;YAAC,CAAE;YAAA,UAClDR,KAAK,CAACS;UAAM;YAAA;YAAA;YAAA;UAAA,QACR,gBACT,QAAC,MAAM;YAAC,EAAE,EAAE;cAACJ,OAAO,EAAE,CAAC;cAAEE,WAAW,EAAE,CAAC;cAAEC,SAAS,EAAE;YAAC,CAAE;YAAA,UACnDR,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}